from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from database.session import AsyncSessionLocal
from utils.services_for_filters import create_filter, get_user_filters, delete_filter
from parser.model_to_param import MODEL_TO_PARAM

from utils.tasks_single import run_single_filter

router = Router()


class FilterCreation(StatesGroup):
    waiting_for_model = State()
    waiting_for_price = State()


@router.message(F.text == "/add_filter")
async def cmd_add_filter(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.
    """
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=model, callback_data=f"model:{model}")]
            for model in MODEL_TO_PARAM.keys()
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=kb)
    await state.set_state(FilterCreation.waiting_for_model)


@router.callback_query(FilterCreation.waiting_for_model, F.data.startswith("model:"))
async def process_model_callback(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    model = callback.data.split(":", 1)[1]
    await state.update_data(model=model)
    await callback.message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {model}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:"
    )
    await state.set_state(FilterCreation.waiting_for_price)


@router.message(FilterCreation.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ü–µ–Ω—É).")
        return

    data = await state.get_data()
    model = data["model"]

    async with AsyncSessionLocal() as session:
        # 1) —Å–æ–∑–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä –≤ –ë–î
        flt = await create_filter(
            session,
            user_id=message.from_user.id,
            model=model,
            max_price=price,
        )

        # 2) –∑–∞–ø—É—Å–∫–∞–µ–º Celery-–∑–∞–¥–∞—á—É –Ω–∞ ¬´–æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω¬ª –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
        run_single_filter.delay(flt.id, pages_per_run=3)

    # 3) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(f"üéØ –§–∏–ª—å—Ç—Ä —Å–æ–∑–¥–∞–Ω:\n–ú–æ–¥–µ–ª—å: {model}\n–¶–µ–Ω–∞ –¥–æ: {price}")
    await state.clear()


@router.message(F.text == "/my_filters")
async def cmd_my_filters(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    async with AsyncSessionLocal() as session:
        filters = await get_user_filters(session, user_id=message.from_user.id)

    if not filters:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /add_filter")
        return

    for flt in filters:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_filter:{flt.id}")]
            ]
        )
        await message.answer(
            f"üìå –§–∏–ª—å—Ç—Ä #{flt.id}\n"
            f"–ú–æ–¥–µ–ª—å: {flt.model}\n"
            f"–¶–µ–Ω–∞ –¥–æ: {flt.max_price if flt.max_price else '‚Äî'}",
            reply_markup=kb
        )


@router.callback_query(F.data.startswith("del_filter:"))
async def process_delete_filter(callback: CallbackQuery):
    """
    –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–Ω–æ–ø–∫–µ.
    """
    filter_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        ok = await delete_filter(session, filter_id)

    if ok:
        await callback.message.edit_text("‚ùå –§–∏–ª—å—Ç—Ä —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.answer("–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.", show_alert=True)

