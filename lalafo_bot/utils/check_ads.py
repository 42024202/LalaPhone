import logging
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from database.session import AsyncSessionLocal
from utils.services_for_filters import add_ad_to_filter, update_last_page, get_all_filters
from parser.model_to_param import MODEL_TO_PARAM
from parser.lalafo_parser import get_filtered_items

logger = logging.getLogger(__name__)


async def send_safe(bot: Bot, user_id: int, text: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")


async def process_single_filter(
    session: AsyncSession,
    bot: Bot,
    flt,
    pages_per_run: int,
    send_empty: bool = False,
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä:
    - –ë–µ—Ä—ë—Ç last_page –∏–∑ –ë–î (–∏–ª–∏ 1),
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç N —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä—è–¥,
    - –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç last_page = 1,
    - –ò–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç last_page = —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞,
    - –®–ª—ë—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö (–µ—Å–ª–∏ send_empty=True).
    """
    model_param = MODEL_TO_PARAM.get(flt.model)
    if not model_param:
        return

    start_page = flt.last_page or 1

    ads, next_page = await get_filtered_items(
        model_param,
        max_price=flt.max_price,
        start_page=start_page,
        pages=pages_per_run,
    )

    if not ads:
        await update_last_page(session, flt.id, 1)
        await session.commit()
        if send_empty:
            await send_safe(bot, flt.user_id, f"‚ÑπÔ∏è –ü–æ —Ñ–∏–ª—å—Ç—Ä—É ¬´{flt.model}¬ª –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
        return

    new_ads_count = 0
    for ad_payload in ads:
        status, ad = await add_ad_to_filter(session, filter_id=flt.id, ad_payload=ad_payload)

        if status == "new":
            new_ads_count += 1
            msg = (
                f"‚ú® –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {ad.title}\n"
                f"–ì–æ—Ä–æ–¥: {ad.city or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                f"–¶–µ–Ω–∞: {ad.last_price or '‚Äî'}\n"
                f"üîó {ad.url}"
            )
            await send_safe(bot, flt.user_id, msg)

        elif status == "price_drop":
            new_ads_count += 1
            msg = (
                f"‚¨áÔ∏è –¶–µ–Ω–∞ —É–ø–∞–ª–∞!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {ad.title}\n"
                f"–ì–æ—Ä–æ–¥: {ad.city or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {ad.last_price or '‚Äî'}\n"
                f"üîó {ad.url}"
            )
            await send_safe(bot, flt.user_id, msg)

    await update_last_page(session, flt.id, next_page)
    await session.commit()

    if send_empty and new_ads_count == 0:
        await send_safe(bot, flt.user_id, f"‚ÑπÔ∏è –ü–æ —Ñ–∏–ª—å—Ç—Ä—É ¬´{flt.model}¬ª –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")


async def process_filters(bot: Bot):
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∏–∑ –ë–î –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö (–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞).
    """
    async with AsyncSessionLocal() as session:
        filters = await get_all_filters(session)
        for flt in filters:
            try:
                await process_single_filter(session, bot, flt, pages_per_run=3, send_empty=True)
            except Exception:
                logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ {flt.id}")

